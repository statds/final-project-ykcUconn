---
title: "Model Result: Brooklyn"
author: "Yang Kang Chua"
date: last-modified
format:
  html:
    code-fold: false
    embed-resources: true
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
execute:
  echo: True
jupyter: python3
---

```{python}
import numpy as np
import pandas as pd
from patsy import dmatrices
import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt
from plotnine import *
import matplotlib.dates as mdates

```

Import Train Data
```{python}
Train = pd.read_csv("Train_Data.csv", index_col = None)

Train.set_index('Date', inplace=True)

Train.head()

```

Import Test Data

```{python}
Test = pd.read_csv("Test_data.csv", index_col = None)

Test.set_index('Date', inplace=True)

Test.head()
```

Get Brooklyn Data

```{python}
Brooklyn_train = Train[Train['Borough'] == 'BROOKLYN']
Brooklyn_test  = Test[Test['Borough'] == 'BROOKLYN']

```

Create `X_train`, `X_test`, `y_train` and `y_test`.
```{python}
expr = """Noise_COUNT ~ is_holiday + MONTH + DAY_OF_WEEK + DAY + Day_Type + TAVG + TMAX + TMIN + PRCP + Population + Home_Value + House_Income"""

y_train_Brooklyn, X_train_Brooklyn = dmatrices(expr, Brooklyn_train, return_type='dataframe')
y_test_Brooklyn, X_test_Brooklyn = dmatrices(expr, Brooklyn_test, return_type='dataframe')
```

Find the critical value from the chi-square distribution table
```{python}
from scipy.stats import chi2

p = 0.05
df_resid = 716

crit_val = chi2.ppf(q=1-p, df=df_resid)
print(crit_val)

```

Create Poisson Regression model

```{python}
poisson_model_Brooklyn = sm.GLM(y_train_Brooklyn, X_train_Brooklyn, 
                                        family=sm.families.Poisson()).fit()

poisson_predictions_Brooklyn = poisson_model_Brooklyn.get_prediction(X_test_Brooklyn)

poisson_summary_Brooklyn = poisson_predictions_Brooklyn.summary_frame()

poisson_predictions_Brooklyn =poisson_summary_Brooklyn['mean']

print(poisson_model_Brooklyn.summary())

```

Create Negative Binomial regression model 

```{python}
Brooklyn_train = Brooklyn_train.copy()
Brooklyn_train.loc[:, 'BB_LAMBDA'] = poisson_model_Brooklyn.mu

Brooklyn_train.loc[:,'AUX_OLS_DEP'] = Brooklyn_train.apply(
    lambda x: ((x['Noise_COUNT'] - x['BB_LAMBDA'])**2 - x['BB_LAMBDA']) / 
    x['BB_LAMBDA'], axis=1)

ols_expr = """AUX_OLS_DEP ~ BB_LAMBDA - 1"""

aux_olsr_results_Brooklyn = smf.ols(ols_expr, Brooklyn_train).fit()

nb2_model_Brooklyn = sm.GLM(y_train_Brooklyn, X_train_Brooklyn,
                                    family=sm.families.NegativeBinomial(alpha=aux_olsr_results_Brooklyn.params[0])).fit()

nb2_predictions_Brooklyn = nb2_model_Brooklyn.get_prediction(X_test_Brooklyn)

nb2_summary_frame_Brooklyn = nb2_predictions_Brooklyn.summary_frame()

nb2_predicted_Brooklyn = nb2_summary_frame_Brooklyn['mean']

print(nb2_model_Brooklyn.summary())

```

Poisson Regression model actual vs predicted
```{python}
actual_counts = y_test_Brooklyn['Noise_COUNT']

fig, ax = plt.subplots(figsize = (9,6))
fig.suptitle('Predicted versus actual Number of complaints in Brooklyn')
ax.plot(X_test_Brooklyn.index, poisson_predictions_Brooklyn, 
'go-', label='Predicted counts')
ax.plot(X_test_Brooklyn.index, actual_counts, 'ro-', label='Actual counts')

locator = mdates.DayLocator()
formatter = mdates.DateFormatter('%d')
ax.xaxis.set_major_locator(locator)
ax.xaxis.set_major_formatter(formatter)
plt.legend()
plt.show()

```

Negative Binomial regression model actual vs predicted

```{python}

fig, ax = plt.subplots(figsize = (9,6))
fig.suptitle('Predicted versus actual Number of complaints in Brooklyn')
ax.plot(X_test_Brooklyn.index, nb2_predicted_Brooklyn, 
'go-', label='Predicted counts')
ax.plot(X_test_Brooklyn.index, actual_counts, 'ro-', label='Actual counts')

locator = mdates.DayLocator()
formatter = mdates.DateFormatter('%d')
ax.xaxis.set_major_locator(locator)
ax.xaxis.set_major_formatter(formatter)
plt.legend()
plt.show()

```

Which is better?

```{python}

lrt_stat = 2 * (nb2_model_Brooklyn.llf - poisson_model_Brooklyn.llf)

# Calculate critical value at 1% significance level
from scipy.stats import chi2
crit_val = chi2.ppf(0.99, df=1)

# Compare test statistic to critical value
if lrt_stat > crit_val:
    print("Reject null hypothesis: NB2 model is a better fit than Poisson model.")
else:
    print("Fail to reject null hypothesis: Poisson model is a better fit than NB2 model.")

```